"0","if (""price"" %in% colnames(combined_features)) {"
"0","  combined_features <- combined_features[, !colnames(combined_features) %in% ""price""]"
"0","}"
"0","data_for_model <- cbind("
"0","  pca_data,                         # PCA-transformed features"
"0","  cluster = as.numeric(kmeans_pca$cluster),  # Cluster labels"
"0","  combined_features,                # Original features (scaled + dummy-encoded)"
"0","  price = data$price                # Target variable"
"0",")"
"0",""
"0","# Step 1: Split data into training and testing sets"
"0","set.seed(123)"
"0","train_index <- createDataPartition(data_for_model$price, p = 0.8, list = FALSE)"
"0","train_data <- data_for_model[train_index, ]"
"0","test_data <- data_for_model[-train_index, ]"
"0",""
"0","# Step 2: Remove `price` from predictors and create `log_price`"
"0","train_data$log_price <- log1p(train_data$price)  # log(1 + price)"
"0","test_data$log_price <- log1p(test_data$price)"
"0",""
"0","train_data <- train_data[, !colnames(train_data) %in% ""price""]  # Remove `price`"
"0","test_data <- test_data[, !colnames(test_data) %in% ""price""]    # Remove `price`"
"0",""
"0","# Step 3: Normalize numeric features"
"0","normalize <- function(df, target_var) {"
"0","  numeric_cols <- sapply(df, is.numeric)"
"0","  numeric_cols[target_var] <- FALSE"
"0","  df[, numeric_cols] <- scale(df[, numeric_cols])"
"0","  return(df)"
"0","}"
"0",""
"0","train_data_norm <- normalize(train_data, target_var = ""log_price"")"
"0","test_data_norm <- normalize(test_data, target_var = ""log_price"")"
"0",""
"0","# Step 6: Define hyperparameter grid for neural network"
"0","nn_grid <- expand.grid("
"0","    size =  c(5, 10, 20, 30),  # Hidden neurons"
"0","    decay = c(0.001, 0.01, 0.1, 1, 0.5)  # Regularization parameters"
"0",")"
"0",""
"0","# Step 5: Set up cross-validation"
"0","nn_control <- trainControl(method = ""cv"", number = 5)"
"0",""
"0",""
"0","# Step 6: Train the neural network model"
"0","set.seed(123)"
"0","nn_tuned <- train("
"0","    log_price ~ .,"
"0","    data = train_data_norm,"
"0","    method = ""nnet"","
"0","    trControl = nn_control,"
"0","    tuneGrid = nn_grid,"
"0","    linout = TRUE,"
"0","    trace = FALSE,"
"0","    maxit = 100"
"0",")"
"0",""
"0","# Print the best parameters"
"0","print(nn_tuned$bestTune)"

"0","data_for_model <- data.frame("
"0","  PC1 = pca_result$x[, 1],  # First principal component"
"0","  PC2 = pca_result$x[, 2],  # Second principal component"
"0","  cluster = as.numeric(combined_features$pca_cluster),  # Cluster labels as numeric"
"0","  price = data$price  # Assuming `price` is already defined"
"0",")"
"0",""
"0","# Step 1: Split data into training and testing sets"
"0","set.seed(123)"
"0","train_index <- createDataPartition(data_for_model$price, p = 0.5, list = FALSE)"
"0","train_data <- data_for_model[train_index, ]"
"0","test_data <- data_for_model[-train_index, ]"
"0",""
"0","# Step 2: Elastic Net model training"
"0","# Create design matrices"
"0","x_train <- model.matrix(price ~ ., train_data)[, -1]  # Exclude intercept"
"0","y_train <- train_data$price"
"0","x_test <- model.matrix(price ~ ., test_data)[, -1]"
"0","y_test <- test_data$price"
"0",""
"0","# Perform Elastic Net with cross-validation"
"0","set.seed(123)"
"0","cv_model <- cv.glmnet(x_train, y_train, alpha = 0.5, family = ""gaussian"")  # Alpha = 0.5 for Elastic Net"
"0","best_lambda <- cv_model$lambda.min  # Optimal lambda based on cross-validation"
"0",""
"0","# Fit the final model"
"0","elastic_net_model <- glmnet(x_train, y_train, alpha = 0.5, lambda = best_lambda)"
"0",""
"0","# Step 3: Predict and evaluate"
"0","predictions <- predict(elastic_net_model, newx = x_test)"
"0",""
"0","# Calculate Normalized MSE"
"0","mean_price <- mean(y_test) "
"0","normalized_mse <- mean((predictions - y_test)^2) / mean_price^2  "
"0",""
"0","# Step 4.2: Bias-variance tradeoff plot (Normalized MSE vs Lambda)"
"0","normalized_mse_values <- cv_model$cvm / mean_price^2  # Normalize the cross-validation MSEs"
"0","plot(log(cv_model$lambda), normalized_mse_values, "
"0","     type = ""b"", "
"0","     xlab = ""Log(Lambda)"", "
"0","     ylab = ""Normalized Mean Squared Error (Normalized MSE)"", "
"0","     main = ""Bias-Variance Tradeoff: Normalized MSE vs Lambda"","
"0","     col = ""blue"", pch = 19)"
